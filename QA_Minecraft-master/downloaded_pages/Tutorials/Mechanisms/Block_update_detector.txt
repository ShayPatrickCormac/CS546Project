Overview
    The Block Update Detector, or BUD switch, is a redstone mechanism that uses quirks in the game in order to detect changes in nearby blocks. There are many different designs that are all based on the same general idea: a redstone circuit is put in a state where it should be following a mechanic, but the game has not updated the block to follow this rule. This unupdated block then functions as the "sensor". When an adjacent block changes state in some way, the game updates all adjacent blocks - including the sensor block - and powers them up. The circuit then performs some other action and, with most designs, goes back into standby. Note: Most of the BUD switches listed below do not work on Bedrock Edition, since redstone is largely separate from block updates.

What it detects
    The BUD switch detects the following events when they happen next to the sensor block: Placement of blocks, Destruction of blocks, Water or lava level changes, Freezing of water or melting of ice and frosted ice, A gravity-affected block (e.g. a sand block) landing after falling, Movement of blocks by pistons, including piston heads, Endermen picking up and putting down blocks, Saplings growing into trees, Mushrooms growing into huge mushrooms, Growth and spread of plants, including: cacti, flowers, grass, mushrooms, melons, pumpkins, and sugar canes, cocoa beans, bamboo, crops (e.g. melon stems), nether wart, and vines), Leaf growth and decay, Growth and death of grass blocks, Dirt becoming farmland, farmland becoming hydrated, farmland reverting to dirt, Fire igniting or burning out, A furnace beginning or ceasing to smelt, A redstone ore block beginning or ceasing to glow, Changes in redstone state or power level, and activation of redstone devices, Changing the delay of a repeater, Rails changing orientation, Powered rails and activator rails getting powered or depowered, TNT igniting and becoming an entity, Silverfish entering a block, Cake being eaten, The opening or closing of a chest or trapped chest, The activation of a tripwire (even if not attached to a tripwire hook)., Vines, crops (e.g. melon stems), nether wart, or cocoa beans growing, The upper block of a 2-block tall plant (e.g. tall grass, rose bush) replacing/being replaced by an air block when that plant is placed or broken, A dragon egg replacing an air block when it teleports to a location after a player tries to break it, A grass block changing to dirt due to sheep "eating" the grass, A chorus flower growing into a chorus plant, A dry sponge absorbing water, Switching a comparator between comparison and subtraction modes, Playing a note block, Changing the number of layers in a snow layer block, Leaf distance from a log changing, Scaffolding distance changing, Composter fill level changing Block and block state changes that some BUDs may not be able to detect, include: Opening or closing a shulker box or ender chest, Inserting or removing a music disc in/from a jukebox, Placing or removing of a bottle/potion in/from a brewing stand, Changing the contents of a chest, trapped chest, shulker box, ender chest, dispenser, dropper, brewing stand, or furnace.

Types of BUD Switches
    Below is a comprehensive video from SethBling (outdated), which showcases a variety of compact block update detectors, mostly making use of the redstone block.

  In-Game
    The BUD switch now has a compact block form in-game and it was added in 1.11 snapshot 16w39a called the 'Observer'. The observer does not detect block updates, instead it detects block state changes.

  Piston Based
    Many BUD switch designs exploit a property of pistons called quasi-connectivity. A piston can receive power through a space one block above itself. In this case, the power source is either above and to the side of the piston, or two blocks above it. However, when powered in this way, the piston does not immediately notice changes in the state of the power source. When some other block update happens next to the piston, it will "wake up" and react to the change. By forming a feedback loop, where the state of the piston controls the state of its power source, it becomes the sensor of a simple BUD switch: In this design, the piston will only extend in response to an adjacent block update, but after extending it will immediately retract because the arm of the piston notices the repeater next to it turning off. This is how a piston BUD resets itself: by having the power run next to the extended piston arm, with a delay. Note: If the block diagonally adjacent to the sticky piston becomes horizontally adjacent, the circuit will constantly pulse instead. This design can be extended with multiple sensor blocks. All of the pistons in this design are sensors. A 1-wide tileable design using redstone blocks: Alternative method: if players take a sticky piston facing parallel to the ground, then place a Block of Redstone on its face, and connect the block of redstone out to the side of the piston through a repeater that goes into a block diagonally adjacent to the piston, it works a fully functional BUD. Then, if you set a delay of any number of ticks other than the default 1-tick delay on the repeater, it turns into a T-BUD. This process can also be reversed by setting the repeater back to its default 1-tick setting. (It only works since release of Redstone Blocks, though players could theoretically use a normal block and a redstone torch to mimic its effects.) An extremely compact one-time design that is easily hidden and therefore ideal for traps is as follows: Place a piston, a sticky piston is most useful, parallel to the ground. Place a block one block to any side except the piston head and one block above the
piston. On the side of the block facing the piston, place a redstone torch. Then place a lever on any other side of the block and switch it on. The redstone torch will go out but the piston will remain extended. You can then break everything except for the piston, but make sure to break the lever after you break the torch. A block update will then cause the piston to retract, possibly pulling the floor out from under the victim. Remember, though, that after the detector is tripped, it has to be rebuilt to be used again. The design looks something like this: Or, for it being smaller:
The player can make a 2×1 (3×1 when extended) BUD by having a 2 sticky pistons (stacked) both facing any direction except up and down, then on both of those sticky pistons add Redstone Blocks. Whenever a block is updated, (destroyed, placed etc.) it will switch the bottom piston outwards. Good for traps, as the BUD may need to be compact. The only con to this is that it has to be reset. Another extremely compact design involves using 1 sticky piston facing up with a slime block and redstone block stacked on top of it. This design is 1×3 (1×4 when extended) and allows the piston to be updated from 5 of its sides. It does not need to be reset after triggering, but players do need to make sure that the slime block isn't grabbing a wall in order to activate in the first place.

  Stuck-Piston Based
    The following designs works because pistons can't be pushed by other pistons while extended. Also, when a piston retracts, it doesn't notify any other pistons that were trying to push it. The piston with the block attached to it is sticky and acts as the sensor. This design has the advantage of a low profile, and also that the quirk it exploits is less "buggy" and less likely to be fixed in the future. The latter design above can also be extended to an array in a variety of ways, including a one-wide design. The stuck-piston principle can also be used to hide a BUD completely underground, as shown by this video:

  Dropper Based
    Here is a video about this.[needs testing]

  Redstone Torch Based
    As of 14w25a (with the fix of MC-56541), a burned-out redstone torch can be used as a reliable BUD. Once burned-out, a redstone torch will reset upon an update from any adjacent block. This is the smallest and simplest BUD, only requiring a single torch and redstone dust (plus two repeaters for a solid output signal.) A redstone torch on the side of a block and put redstone dust make the redstone signal loops with itself is also a BUD. The place around the redstone torch (include upside and downside) is the detecting place, but not the redstone dust. The redstone torch will blink for 16 ticks, and finally burn down. It has a 56 ticks cool down. It can't detect sleeping in a bed. This works in the Bedrock Edition of Minecraft, as shown in the video below.

  Redirection based
    When redstone dust redirects, it does not send out block updates, so a piston can have its power removed by redirecting redstone dust away from it to remove power. When the piston receives a block update, it will update its state accordingly and the redirection bud will reset.

Variations
    Other devices can be built using the same underlying principle as the BUD switch.

  BUD in Bedrock Edition
    By using a waterlogged block that is not allowed to flow (through the use of trapdoors or other techniques) and an observer clock, if the player updates the waterlogged block rapidly and the observer clock is in the same chunk the clock will break and give a constant output out of both sides. Then whenever the block is next updated, one side of the clock will pulse off for one tick. You can create a BUD switch using this by linking up using both sides as the output of the BUD. Video describing this phenomenon:

  T-BUD
    By eliminating the reset mechanism of a BUD switch, it becomes a T-BUD or Toggle-BUD. This device has two stable states, which it switches between when it detects a block update next to the piston. This is equivalent to a normal BUD connected to a T Flip-Flop, but much simpler to build. It is useful for tracking the state of blocks like furnaces, grass block, dirt, and beds. However, it has useful capabilities for placing some blocks two blocks away. When placing a piece of redstone dust two blocks away, the T-BUD activates when it is destroyed only. When placing a repeater two blocks away, the T-BUD activates only on the placement. 


T-BUD in first state


, 


T-BUD in second state


 Note: As of Java Edition 1.7.4,[note 1] the repeater in the picture must be set to a two tick delay. If the repeater is left at one tick, it will work as a BUD.

