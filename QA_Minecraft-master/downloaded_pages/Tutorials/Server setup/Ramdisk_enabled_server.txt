Overview
    This tutorial is intended to give you a basic understanding of what a ramdisk is, what use it is for Minecraft and how to make a Minecraft server use a ramdisk.

Ramdisk introduction
    Conventionally, files and directories are stored on hard disk drives which, by today's standards, offer a lot of space at mediocre data transfer rates (between 80MB/s and 200MB/s). Ramdisks are virtual file systems (unlike HDDs which are hardware) that live completely inside the computer's RAM. They offer significantly higher data transfer rates (between 3,000MB/s and 15,000MB/s) at the cost of volatility (data is lost after restarting the computer) and space (limited by the amount of RAM installed on the system, including swap space). Many utilities however make it possible to backup Ramdisk data at set intervals, and before the system is shut down, then load the last data when the system starts up.

Advantages
    Very high transfer speed (data to application), Very low seek time (searching between and in files)

Disadvantages
    Ramdisks are cleared when a system restarts (Not true for Dataram RAMDisk), Unfeasible if the world size exceeds the available RAM

Why it makes sense for Minecraft servers
    In a Minecraft server, one of the strongest bottlenecks are disk I/O related operations (e.g. chunk management). By moving the data into the RAM, access times are near instant and data transfer rates become significantly faster, making chunk loading and saving much faster operations. Since a Minecraft world currently consists of very many chunk files, seek time is equally, if not more, important for overall speed.

Basic Minecraft and ramdisk setup
    Make sure to back up your files before starting!

  GNU/Linux (easy way)
    A simple way to load a minecraft server into a ramdisk was posted on the Aimless Bits blog [1] on March 12, 2011. It involves modifying the server startup script available on the wiki and making some minor changes to fstab. This guide fleshes out the process and makes some minor changes to Aimless Bits' script. This quick guide assumes you have a user for loading minecraft, a minecraft directory and a server running. It also helps to be familiar with the /etc/init.d/minecraft startup script. Firstly, start by creating a directory for the ramdisk in your home directory, i.e. "/home/username/minecraft_ramdisk"., To mount it as a ramdisk, simply edit your /etc/fstab/ file: Then add this line, making sure that the path is correct (username, dir name etc.) The size of the ramdisk MUST be larger than the minecraft directory world. Make sure that you give yourself some overhead. Restart your computer. The ramdisk then loads every time you restart. If you wish to load immediately, type It's now a matter of simply running a modified script that loads the files on the drive onto the server, copies them back on a timely basis to prevent data loss, and does backups. Again, this is a modified version of the script found at Aimless Bits. If you have /etc/init.d/minecraft, delete it or overwrite it with this script. If you don't, make a new text file, call it minecraft, and copy this script into it. Move this script into your /etc/init.d/ directory, and make it executable: Note:  This script misses the command option that the other minecraft init script has on this website, server startup script. Therefore, the script is rewritten with the command code in it, so ramdisk servers can also use the command thing to sync things without having to get another plugin to schedule things: http://pastebin.com/4ynwL2js You're almost done! This script behaves exactly like the standard startup script, only that it takes care of loading and maintaining the ramdisk. You can also modify the script to use rsync instead of cp In case you want to do other things, such as remote copying, but performance differences are probably negligible unless you have very big worlds. DO NOT SKIP THIS STEP. You need to add a crontab entry to save your world. See below for specific reasons, but you run the risk of losing data if you don't do this. This script has two disk save functions, disksavehalt and disksaverun. Disksavehalt assumes the screen session is closing or backing up, and thus does not disable level saving. Do NOT call this function in crontab. Use disksave run instead. To do this Then add the line: The number represents how often in minutes should you save the world. If you feel like you have a robust setup, power supply backups and the whole shebang, run this less frequently. Otherwise, stick to 5 minutes at the least! The other line runs minecraft backup every 6 hours, at :20. Don't skimp on backups! You've been warned! Hope this helps all those would be admins out there. Good luck!

  GNU/Linux (alternative)
    On most GNU/Linux distributions there is already a ramdisk set up (usually mounted to /dev/shm (shared memory)) which defaults to using at most half of your total installed RAM. If there is not one already set up, resources on how to do it are widely available on the Internet. It is possible to move anything into the ramdisk, but this tutorial focuss on just moving the map into it and leaving the server files on the conventional drive. Given the following basic server directory "minecraft_server/", inside a user's home directory, containing the world "world" and all other required files

    ~/minecraft_server/
    world/
    minecraft_server.jar
    server.log
    server.properties
    ...

    We want to move "world/" into the shared memory. Because of the volatility of ramdisks, we also want to create a new folder into which an automated script periodically saves the current snapshot of the world, called (for example) "world_storage" by copying the current world to a new name Now with the old world in a safe location, we can go ahead and move the world into the ram-disk By now, the world is loaded into the RAM, but the Minecraft server doesn't see it in its directory anymore, causing it to recreate it when started. To stop it from doing that, we have to create a symbolic link to the world in the ramdisk by running This creates a link to "/dev/shm/minecraft/world/" called "world/" in the server's directory, which the server uses like the actual world folder, but now inside the RAM. Now we need to take care of the volatility of the ramdisk, by periodically saving the world from the RAM into "world_storage/". I'm going to use cron for scheduling and rsync for synching here. First, we need a script that can be called by cron (it doesn't have to be a script, you could call rsync directly from the cron command line, but this allows for easy customizing later on) And then we need to make this script execute every few minutes (I'll use 5 minutes here, you can test out what works best for you) This opens an editor (more precisely, the editor in your "EDITOR" environment variable) for editing your user cron table. Add the following line: Now if your server restarts, you must recreate the world folder (/dev/shm/minecraft) then (/dev/shm/minecraft/world) in the shared memory because the /dev/shm/ empties after restart,. You can do this by making another similar shell script. So make a shell script file like before: Every time you restart you need to run this script to remount the Ramdisk. Do not add this to the crontab. You can add this to the start up if you figure it out. 

  GNU/Linux (quick & dirty)
    This is a quick and dirty (but functionally identical) version of the GNU/Linux alternative listed above. Here, this technique is used with a Fedora-based server and it works great. Start from your working server directory and copy the existing world to a backup location: You might want to keep an additional backup copy of the world as well, in case something goes wrong. We need the directory name "world" to make this work, so remove world/ from the working directory: Now, we want to redirect the server to a world directory in shared memory. Do this by creating a soft link from shared memory to your working directory: Shared memory is volatile, so we need something to back up the world directory to disk periodically. A single line in crontab does the trick: Now we need a way to "mount" the world in shared memory. Create a start.sh file and include the following 2 lines: You can use the start.sh script to mount your world in shared memory each time you reboot your server. Then you can start the Minecraft server as normal (or add a 3rd line to start.sh for convenience). If you choose to start the server with start.sh and use the screen command, be sure to start the start.sh script with screen. Using screen inside the script causes the server to run in the background, leaving you unable to run console commands.

  Windows
    Use a Ramdisk utility like Dataram RAMDisk (freeware version available) to create a RAM disk and place the server files on it. Dataram RAMDisk has the option to automatically save an image every time it shuts down and also every few minutes. The free version restricts its maximum disk space to 1G. If larger Ramdisks are required, the Winramtech and the Softperfect Ramdisks seem to offer the best performance with similar features as Dataram RAMDisk. Before you begin: At least 4G of RAM on your machine is ideal, Enabling "Save Disk Image on Shutdown" impacts your Windows shutdown times where you leave RAMDisk running on shutdown, and similarly startup times for "Load Disk Image on Startup". This is not a problem if you manually start and stop the server only when needed., Search the Internet for some ways to save your RAMDisk in case it does not work., FAT16 is generally faster than FAT32 on RAM disks, however FAT16 formatting is not available for partitions over 2048MB, REMEMBER: Always have a backup! If your computer crashes, you lose any data on the RAM disk that has not been backed-up/copied to your hard drive!, Make sure that you allocate more than enough memory for the RAM disk than that of the size of your 'Minecraft Server' folder - remember that the Minecraft world data can increase by a lot!, ...and on the other hand, don't leave too little RAM remaining for the running of Windows and the server itself. Setting up your RAM disk (Simple usage) Your RAM disk now automatically saves upon shutdown, and is restored (with data intact) on startup. Boot and shutdown times get lengthened depending on the size you set. Also, you may wish to adjust the AutoSave interval. If you did not select "Save Disk Image on Shutdown", make sure continue reading especially!! You need to follow these procedures every time you shutdown the computer to avoid data loss! Stopping the RAM disk manually (Before shutting down computer) When you wish to start the server next time, just start it like you did the first time. Do this only if you ticked 'Load Disk Image at Startup'. Alternative To start it again, start your RAMDisk like you did the first time and copy all the server files into the RAMDisk, then start your server.

  macOS
    Type this to create your RAM disk on macOS: It's only one command line to write, quite fast and efficient. If you've followed these instructions, your Ramdisk appears in /Volumes/ramdisk. After that, proceed as if you were on Linux, using Terminal and your favorite text editor.

